/* The following code was generated by JFlex 1.4.3 on 5/8/13 3:14 AM */


/**
 * Created with IntelliJ IDEA.
 * User: pedram
 * Date: 4/10/13
 * Time: 4:52 PM
 * To change this template use File | Settings | File Templates.
 */
package cool;
import beaver.Symbol;
import beaver.Scanner;
import cool.parser.Terminals;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/8/13 3:14 AM from the specification file
 * <tt>src/cool/mycool.jflex</tt>
 */
class MyCoolScanner extends Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 6;
  public static final int MSTRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\25\0\1\1\1\17\1\62\5\0\1\11\1\12"+
    "\1\4\1\5\1\21\1\6\1\14\1\2\1\64\11\61\1\20\1\13"+
    "\1\16\1\15\1\22\2\0\2\60\1\56\17\60\1\52\7\60\1\0"+
    "\1\63\2\0\1\57\1\0\1\25\1\46\1\23\1\33\1\27\1\40"+
    "\1\54\1\42\1\37\1\51\1\53\1\24\1\45\1\32\1\36\1\43"+
    "\1\55\1\35\1\26\1\31\1\41\1\34\1\44\1\30\1\47\1\50"+
    "\1\7\1\0\1\10\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\22\22\2\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\0\2\2\1\0\1\33\1\34"+
    "\1\35\1\36\17\22\1\37\4\22\1\40\12\22\1\23"+
    "\1\0\1\2\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\0\1\47\13\22\1\50\4\22\1\51\1\22\1\52"+
    "\1\53\1\54\6\22\1\55\10\22\1\23\1\56\1\22"+
    "\1\57\1\22\1\60\3\22\1\61\2\22\1\62\1\22"+
    "\1\63\1\64\1\22\1\65\14\22\1\66\3\22\1\67"+
    "\1\70\1\71\2\22\1\72\1\22\1\73\1\74\7\22"+
    "\1\75\1\22\1\76\3\22\1\77\1\100\1\101\1\22"+
    "\1\102\1\22\1\103\1\104\2\22\1\105\1\22\1\106"+
    "\6\22\1\107\3\22\1\110\1\111\1\112\1\22\1\113"+
    "\1\114\1\115\1\116\1\117\1\22\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[224];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\324"+
    "\0\324\0\324\0\324\0\324\0\324\0\324\0\324\0\324"+
    "\0\u0173\0\u01a8\0\324\0\324\0\324\0\u01dd\0\u0212\0\u0247"+
    "\0\u027c\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef"+
    "\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597"+
    "\0\u05cc\0\u0601\0\u0636\0\u066b\0\324\0\324\0\u06a0\0\324"+
    "\0\u06d5\0\u070a\0\u073f\0\u0774\0\324\0\324\0\324\0\324"+
    "\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c"+
    "\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u02e6"+
    "\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u02e6\0\u0b98\0\u0bcd\0\u0c02"+
    "\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa"+
    "\0\u0ddf\0\324\0\324\0\324\0\324\0\324\0\324\0\324"+
    "\0\u0e14\0\324\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52"+
    "\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u02e6\0\u1090\0\u10c5"+
    "\0\u10fa\0\u112f\0\u02e6\0\u1164\0\u02e6\0\u02e6\0\u02e6\0\u1199"+
    "\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341"+
    "\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\324"+
    "\0\u14e9\0\u02e6\0\u151e\0\u02e6\0\u1553\0\u1588\0\u15bd\0\u02e6"+
    "\0\u15f2\0\u1627\0\u02e6\0\u165c\0\u02e6\0\u02e6\0\u1691\0\u02e6"+
    "\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804\0\u1839"+
    "\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u02e6\0\u1942\0\u1977\0\u19ac"+
    "\0\u0597\0\u02e6\0\u02e6\0\u19e1\0\u1a16\0\u02e6\0\u1a4b\0\u02e6"+
    "\0\u02e6\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe"+
    "\0\u02e6\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u02e6\0\u02e6"+
    "\0\u02e6\0\u1cfc\0\u02e6\0\u1d31\0\u02e6\0\u02e6\0\u1d66\0\u1d9b"+
    "\0\u02e6\0\u1dd0\0\u02e6\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9"+
    "\0\u1f0e\0\u02e6\0\u1f43\0\u1f78\0\u1fad\0\u02e6\0\u02e6\0\u02e6"+
    "\0\u1fe2\0\u02e6\0\u02e6\0\u02e6\0\u02e6\0\u02e6\0\u2017\0\u02e6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[224];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\6\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\5\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\2\33\1\44\1\45\1\46\1\33\1\47\2\33"+
    "\1\50\3\33\1\51\1\5\1\50\1\52\1\53\1\5"+
    "\1\52\3\54\1\55\56\54\1\56\1\57\4\54\1\60"+
    "\56\54\1\61\1\57\1\54\4\62\1\63\60\62\66\0"+
    "\1\6\1\0\1\6\63\0\1\64\1\0\1\65\75\0"+
    "\1\66\4\0\1\67\57\0\1\70\72\0\1\33\1\71"+
    "\1\72\34\33\2\0\1\33\23\0\2\33\1\73\34\33"+
    "\2\0\1\33\23\0\23\33\1\74\13\33\2\0\1\33"+
    "\23\0\4\33\1\75\11\33\1\76\20\33\2\0\1\33"+
    "\23\0\1\33\1\77\3\33\1\100\31\33\2\0\1\33"+
    "\23\0\37\33\2\0\1\33\23\0\12\33\1\101\4\33"+
    "\1\102\4\33\1\103\12\33\2\0\1\33\23\0\2\33"+
    "\1\104\1\33\1\105\11\33\1\106\20\33\2\0\1\33"+
    "\23\0\4\33\1\107\6\33\1\110\23\33\2\0\1\33"+
    "\23\0\2\33\1\111\34\33\2\0\1\33\23\0\4\33"+
    "\1\112\32\33\2\0\1\33\23\0\11\33\1\113\11\33"+
    "\1\114\13\33\2\0\1\33\23\0\15\33\1\115\4\33"+
    "\1\116\14\33\2\0\1\33\23\0\2\33\1\117\10\33"+
    "\1\120\1\121\22\33\2\0\1\33\23\0\2\33\1\122"+
    "\7\33\1\123\24\33\2\0\1\33\23\0\14\33\1\124"+
    "\2\33\1\125\17\33\2\0\1\33\23\0\2\33\1\126"+
    "\34\33\2\0\1\33\23\0\14\33\1\127\22\33\2\0"+
    "\1\33\23\0\37\50\2\0\1\50\23\0\13\50\1\130"+
    "\23\50\2\0\1\50\61\0\1\52\2\0\1\52\62\0"+
    "\1\131\2\0\3\54\1\0\56\54\2\0\1\54\3\0"+
    "\1\132\25\0\1\133\1\60\2\0\1\134\2\0\1\135"+
    "\5\0\1\136\13\0\1\137\1\0\1\140\62\0\1\141"+
    "\2\0\4\62\1\0\60\62\2\0\1\142\62\0\3\64"+
    "\1\132\61\64\23\0\2\33\1\143\34\33\2\0\1\33"+
    "\23\0\3\33\1\144\2\33\1\145\30\33\2\0\1\33"+
    "\23\0\25\33\1\146\11\33\2\0\1\33\23\0\3\33"+
    "\1\147\33\33\2\0\1\33\23\0\2\33\1\150\34\33"+
    "\2\0\1\33\23\0\20\33\1\151\16\33\2\0\1\33"+
    "\23\0\3\33\1\152\33\33\2\0\1\33\23\0\6\33"+
    "\1\153\30\33\2\0\1\33\23\0\2\33\1\154\13\33"+
    "\1\155\5\33\1\156\12\33\2\0\1\33\23\0\12\33"+
    "\1\157\1\33\1\160\22\33\2\0\1\33\23\0\20\33"+
    "\1\161\16\33\2\0\1\33\23\0\6\33\1\162\30\33"+
    "\2\0\1\33\23\0\21\33\1\163\15\33\2\0\1\33"+
    "\23\0\1\33\1\164\35\33\2\0\1\33\23\0\15\33"+
    "\1\165\21\33\2\0\1\33\23\0\1\33\1\166\10\33"+
    "\1\167\24\33\2\0\1\33\23\0\6\33\1\170\23\33"+
    "\1\171\4\33\2\0\1\33\23\0\4\33\1\172\32\33"+
    "\2\0\1\33\23\0\26\33\1\173\10\33\2\0\1\33"+
    "\23\0\20\33\1\174\16\33\2\0\1\33\23\0\1\33"+
    "\1\175\35\33\2\0\1\33\23\0\12\33\1\176\24\33"+
    "\2\0\1\33\23\0\7\33\1\177\27\33\2\0\1\33"+
    "\23\0\1\200\36\33\2\0\1\33\23\0\13\33\1\201"+
    "\1\202\22\33\2\0\1\33\23\0\6\33\1\203\30\33"+
    "\2\0\1\33\23\0\14\33\1\204\22\33\2\0\1\33"+
    "\23\0\6\33\1\205\30\33\2\0\1\33\23\0\4\33"+
    "\1\206\32\33\2\0\1\33\23\0\13\50\1\207\23\50"+
    "\2\0\1\50\62\0\1\210\64\0\1\56\25\0\3\33"+
    "\1\211\33\33\2\0\1\33\23\0\4\33\1\212\32\33"+
    "\2\0\1\33\23\0\1\213\36\33\2\0\1\33\23\0"+
    "\24\33\1\214\12\33\2\0\1\33\23\0\6\33\1\215"+
    "\30\33\2\0\1\33\23\0\1\33\1\216\35\33\2\0"+
    "\1\33\23\0\4\33\1\217\32\33\2\0\1\33\23\0"+
    "\4\33\1\220\32\33\2\0\1\33\23\0\4\33\1\221"+
    "\32\33\2\0\1\33\23\0\14\33\1\222\22\33\2\0"+
    "\1\33\23\0\4\33\1\223\32\33\2\0\1\33\23\0"+
    "\13\33\1\224\23\33\2\0\1\33\23\0\3\33\1\225"+
    "\33\33\2\0\1\33\23\0\4\33\1\226\32\33\2\0"+
    "\1\33\23\0\14\33\1\227\22\33\2\0\1\33\23\0"+
    "\1\33\1\230\35\33\2\0\1\33\23\0\16\33\1\231"+
    "\20\33\2\0\1\33\23\0\16\33\1\232\20\33\2\0"+
    "\1\33\23\0\12\33\1\233\24\33\2\0\1\33\23\0"+
    "\4\33\1\234\32\33\2\0\1\33\23\0\1\33\1\235"+
    "\11\33\1\236\23\33\2\0\1\33\23\0\3\33\1\237"+
    "\33\33\2\0\1\33\23\0\27\33\1\240\7\33\2\0"+
    "\1\33\23\0\2\33\1\241\34\33\2\0\1\33\23\0"+
    "\30\33\1\242\6\33\2\0\1\33\23\0\6\33\1\243"+
    "\30\33\2\0\1\33\23\0\11\33\1\244\25\33\2\0"+
    "\1\33\23\0\17\33\1\245\17\33\2\0\1\33\23\0"+
    "\1\33\1\246\35\33\2\0\1\33\23\0\1\247\36\33"+
    "\2\0\1\33\23\0\1\33\1\250\35\33\2\0\1\33"+
    "\23\0\1\50\1\251\35\50\2\0\1\50\23\0\3\33"+
    "\1\252\33\33\2\0\1\33\23\0\17\33\1\253\17\33"+
    "\2\0\1\33\23\0\12\33\1\254\24\33\2\0\1\33"+
    "\23\0\4\33\1\255\32\33\2\0\1\33\23\0\12\33"+
    "\1\256\24\33\2\0\1\33\23\0\7\33\1\257\27\33"+
    "\2\0\1\33\23\0\6\33\1\260\30\33\2\0\1\33"+
    "\23\0\21\33\1\261\15\33\2\0\1\33\23\0\11\33"+
    "\1\262\25\33\2\0\1\33\23\0\12\33\1\263\24\33"+
    "\2\0\1\33\23\0\14\33\1\264\22\33\2\0\1\33"+
    "\23\0\12\33\1\265\24\33\2\0\1\33\23\0\1\266"+
    "\36\33\2\0\1\33\23\0\14\33\1\267\22\33\2\0"+
    "\1\33\23\0\12\33\1\270\24\33\2\0\1\33\23\0"+
    "\4\33\1\271\32\33\2\0\1\33\23\0\13\33\1\272"+
    "\23\33\2\0\1\33\23\0\1\33\1\273\35\33\2\0"+
    "\1\33\23\0\2\33\1\274\34\33\2\0\1\33\23\0"+
    "\4\33\1\275\32\33\2\0\1\33\23\0\2\33\1\276"+
    "\34\33\2\0\1\33\23\0\4\33\1\277\32\33\2\0"+
    "\1\33\23\0\17\33\1\300\17\33\2\0\1\33\23\0"+
    "\10\33\1\301\26\33\2\0\1\33\23\0\2\33\1\302"+
    "\34\33\2\0\1\33\23\0\10\33\1\303\26\33\2\0"+
    "\1\33\23\0\10\33\1\304\26\33\2\0\1\33\23\0"+
    "\4\33\1\305\32\33\2\0\1\33\23\0\7\33\1\306"+
    "\27\33\2\0\1\33\23\0\12\33\1\307\24\33\2\0"+
    "\1\33\23\0\14\33\1\310\22\33\2\0\1\33\23\0"+
    "\6\33\1\311\30\33\2\0\1\33\23\0\1\312\36\33"+
    "\2\0\1\33\23\0\6\33\1\313\30\33\2\0\1\33"+
    "\23\0\22\33\1\314\14\33\2\0\1\33\23\0\1\33"+
    "\1\315\35\33\2\0\1\33\23\0\31\33\1\316\5\33"+
    "\2\0\1\33\23\0\1\317\36\33\2\0\1\33\23\0"+
    "\6\33\1\320\30\33\2\0\1\33\23\0\1\321\36\33"+
    "\2\0\1\33\23\0\3\33\1\322\33\33\2\0\1\33"+
    "\23\0\4\33\1\323\32\33\2\0\1\33\23\0\10\33"+
    "\1\324\26\33\2\0\1\33\23\0\14\33\1\325\22\33"+
    "\2\0\1\33\23\0\4\33\1\326\32\33\2\0\1\33"+
    "\23\0\24\33\1\327\12\33\2\0\1\33\23\0\4\33"+
    "\1\330\32\33\2\0\1\33\23\0\6\33\1\331\30\33"+
    "\2\0\1\33\23\0\4\33\1\332\32\33\2\0\1\33"+
    "\23\0\6\33\1\333\30\33\2\0\1\33\23\0\3\33"+
    "\1\334\33\33\2\0\1\33\23\0\4\33\1\335\32\33"+
    "\2\0\1\33\23\0\6\33\1\336\30\33\2\0\1\33"+
    "\23\0\4\33\1\337\32\33\2\0\1\33\23\0\10\33"+
    "\1\340\26\33\2\0\1\33";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8268];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\11\11\2\1\3\11\27\1\2\11"+
    "\1\1\1\11\1\0\2\1\1\0\4\11\40\1\1\0"+
    "\7\11\1\0\1\11\45\1\1\11\130\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[224];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */




  int commentStartLine = 0;
  String stringValue = "";
  int stringStartLine = 0;
  int stringStartCol = 0;
  int mStringStartCol = 0;


  private static int lineNum = 1;
  void incrLineNum() {
     lineNum++;
  }
  public int getLineNum() {
     return lineNum;
  }
  Symbol getTerm(int token) {
    //return new Symbol((short)token, yychar, yychar + yytext().length(),
    //	       		      yyline+1, yycolumn, null);
     //yyend = zzMarkedPos;
     //zzStartRead
    // System.out.println("yychar = " + yychar);
     //System.out.println("yycolumn = " + yycolumn);
      // System.out.println("yyline = " + yyline);
     int pos = Symbol.makePosition(2, 5);
          int endPos = Symbol.makePosition(3,6);

          //return new Symbol((short)token, pos, endPos, yytext().length(), null);

          return new Symbol((short)token, yyline+1, yycolumn+1, yytext().length(), null);
     }

  Symbol getTerm(int token, Object val) {
  //                   System.out.println("yychar = " + yychar);
   //                       System.out.println("yycolumn = " + yycolumn);
    //                        System.out.println("yyline = " + yyline);
    //return new Symbol((short)token, yychar, yychar + yytext().length(), yytext().length(), null );
    int pos = Symbol.makePosition(2, 5);
         int endPos = Symbol.makePosition(3,6);
         if (token == Terminals.STRING) {
          //   System.out.println("yycolumn = " + stringStartCol);
              int len = ((String) val).length() + 2;
            //  System.out.println("len = " + len);

            return new Symbol((short)token, stringStartLine, mStringStartCol + stringStartCol + len, yytext().length(), val);
         }
         return new Symbol((short)token, yyline+1, yycolumn+1, yytext().length(), val);
    //return new Symbol((short)token, yyline, yyline + yytext().length(), -1, null );
 //   return null;
  }





  void error(String msg) {
    String full_msg = "Error at line " + (yyline+1) + " column " + (yycolumn - yytext().length()) + ": " + msg;
    MyCoolError.error(full_msg);

  }
   void error(String msg, String value) {
       String full_msg = "Error at line " + (yyline+1) + " column " + (yycolumn - value.length() + 1) + ": " + msg;
       MyCoolError.error(full_msg);

     }
  void error(String msg, int col) {
         String full_msg = "Error at line " + (yyline+1) + " column " + col + ": " + msg;
         MyCoolError.error(full_msg);

       }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MyCoolScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  MyCoolScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 128) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextToken() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 50: 
          { return getTerm(Terminals.BOOLEAN, new Boolean(true));
          }
        case 81: break;
        case 14: 
          { return getTerm( Terminals.LT );
          }
        case 82: break;
        case 27: 
          { yybegin(COMMENT); commentStartLine = yyline + 1;
          }
        case 83: break;
        case 41: 
          { return getTerm( Terminals.NEW );
          }
        case 84: break;
        case 16: 
          { return getTerm( Terminals.COLON);
          }
        case 85: break;
        case 21: 
          { yybegin(STRING); stringValue = ""; mStringStartCol = 0; stringStartLine = yyline + 1; stringStartCol = yycolumn + 1;
          }
        case 86: break;
        case 43: 
          { error("val is a reserved word", ""); return getTerm( Terminals.ID, yytext() );
          }
        case 87: break;
        case 49: 
          { return getTerm( Terminals.ELSE );
          }
        case 88: break;
        case 75: 
          { error("private is a reserved word", ""); return getTerm( Terminals.ID, yytext() );
          }
        case 89: break;
        case 63: 
          { return getTerm( Terminals.WHILE );
          }
        case 90: break;
        case 22: 
          { stringValue += yytext();
          }
        case 91: break;
        case 67: 
          { return getTerm(Terminals.NATIVE);
          }
        case 92: break;
        case 74: 
          { error("package is a reserved word", ""); return getTerm( Terminals.ID, yytext() );
          }
        case 93: break;
        case 73: 
          { error("finally is a reserved word", ""); return getTerm( Terminals.ID, yytext() );
          }
        case 94: break;
        case 32: 
          { return getTerm( Terminals.IF );
          }
        case 95: break;
        case 17: 
          { return getTerm( Terminals.COMMA);
          }
        case 96: break;
        case 80: 
          { error("protected is a reserved word", ""); return getTerm( Terminals.ID, yytext() );
          }
        case 97: break;
        case 54: 
          { error("with is a reserved word", ""); return getTerm( Terminals.ID, yytext() );
          }
        case 98: break;
        case 53: 
          { return getTerm(Terminals.NULL);
          }
        case 99: break;
        case 60: 
          { error("throw is a reserved word", ""); return getTerm( Terminals.ID, yytext() );
          }
        case 100: break;
        case 57: 
          { error("catch is a reserved word", ""); return getTerm( Terminals.ID, yytext() );
          }
        case 101: break;
        case 33: 
          { stringValue += "\t";
          }
        case 102: break;
        case 65: 
          { error("yield is a reserved word", ""); return getTerm( Terminals.ID, yytext() );
          }
        case 103: break;
        case 1: 
          { error("Unknown symbol '" + yytext() + "' ", yycolumn+1);
          }
        case 104: break;
        case 25: 
          { stringValue += "\\" ;
          }
        case 105: break;
        case 24: 
          { yybegin(YYINITIAL); return getTerm(Terminals.STRING, stringValue);
          }
        case 106: break;
        case 69: 
          { error("object is a reserved word", ""); return getTerm( Terminals.ID, yytext() );
          }
        case 107: break;
        case 51: 
          { return getTerm(Terminals.THIS);
          }
        case 108: break;
        case 5: 
          { return getTerm( Terminals.PLUS);
          }
        case 109: break;
        case 29: 
          { return getTerm( Terminals.ARROW);
          }
        case 110: break;
        case 34: 
          { stringValue += "\r";
          }
        case 111: break;
        case 31: 
          { error("do is a reserved word", ""); return getTerm( Terminals.ID, yytext() );
          }
        case 112: break;
        case 66: 
          { error("sealed is a reserved word", ""); return getTerm( Terminals.ID, yytext() );
          }
        case 113: break;
        case 38: 
          { stringValue += "\0";
          }
        case 114: break;
        case 64: 
          { return getTerm( Terminals.MATCH);
          }
        case 115: break;
        case 71: 
          { return getTerm( Terminals.EXTENDS );
          }
        case 116: break;
        case 4: 
          { return getTerm( Terminals.TIMES);
          }
        case 117: break;
        case 42: 
          { return getTerm(Terminals.DEF);
          }
        case 118: break;
        case 12: 
          { return getTerm( Terminals.DOT );
          }
        case 119: break;
        case 8: 
          { return getTerm( Terminals.RBRACE );
          }
        case 120: break;
        case 26: 
          { stringValue += "\n";
          }
        case 121: break;
        case 10: 
          { return getTerm( Terminals.RPAREN );
          }
        case 122: break;
        case 23: 
          { error("Newline is not allowd in string or you didn't close the string", stringValue); yybegin(YYINITIAL);
          }
        case 123: break;
        case 59: 
          { error("trait is a reserved word", ""); return getTerm( Terminals.ID, yytext() );
          }
        case 124: break;
        case 28: 
          { return getTerm( Terminals.EQUALS );
          }
        case 125: break;
        case 44: 
          { return getTerm(Terminals.VAR);
          }
        case 126: break;
        case 76: 
          { error("abstract is a reserved word", ""); return getTerm( Terminals.ID, yytext() );
          }
        case 127: break;
        case 62: 
          { error("final is a reserved word", ""); return getTerm( Terminals.ID, yytext() );
          }
        case 128: break;
        case 58: 
          { return getTerm( Terminals.SUPER );
          }
        case 129: break;
        case 13: 
          { return getTerm( Terminals.ASSIGN);
          }
        case 130: break;
        case 3: 
          { return getTerm( Terminals.DIV );
          }
        case 131: break;
        case 11: 
          { return getTerm( Terminals.SEMI );
          }
        case 132: break;
        case 7: 
          { return getTerm( Terminals.LBRACE );
          }
        case 133: break;
        case 39: 
          { yybegin(YYINITIAL);
          }
        case 134: break;
        case 9: 
          { return getTerm( Terminals.LPAREN );
          }
        case 135: break;
        case 47: 
          { return getTerm( Terminals.CASE );
          }
        case 136: break;
        case 40: 
          { error("try is a reserved word", ""); return getTerm( Terminals.ID, yytext() );
          }
        case 137: break;
        case 55: 
          { error("Cool is a reserved word", ""); return getTerm( Terminals.ID, yytext() );
          }
        case 138: break;
        case 61: 
          { return getTerm(Terminals.BOOLEAN, new Boolean(false));
          }
        case 139: break;
        case 70: 
          { error("import is a reserved word", ""); return getTerm( Terminals.ID, yytext() );
          }
        case 140: break;
        case 20: 
          { return getTerm( Terminals.INTEGER, yytext() );
          }
        case 141: break;
        case 35: 
          { stringValue += "\f";
          }
        case 142: break;
        case 46: 
          { yybegin(MSTRING); mStringStartCol = -2; stringValue = ""; stringStartLine = yyline + 1; stringStartCol = yycolumn + 1;
          }
        case 143: break;
        case 45: 
          { error("for is a reserved word", ""); return getTerm( Terminals.ID, yytext() );
          }
        case 144: break;
        case 18: 
          { return getTerm( Terminals.ID, yytext());
          }
        case 145: break;
        case 72: 
          { error("forSome is a reserved word", ""); return getTerm( Terminals.ID, yytext() );
          }
        case 146: break;
        case 15: 
          { return getTerm( Terminals.NOT);
          }
        case 147: break;
        case 48: 
          { error("lazy is a reserved word", ""); return getTerm( Terminals.ID, yytext() );
          }
        case 148: break;
        case 36: 
          { stringValue += "\b";
          }
        case 149: break;
        case 56: 
          { return getTerm( Terminals.CLASS );
          }
        case 150: break;
        case 37: 
          { stringValue += "\"";
          }
        case 151: break;
        case 78: 
          { return getTerm(Terminals.OVERRIDE);
          }
        case 152: break;
        case 77: 
          { error("requires is a reserved word", ""); return getTerm( Terminals.ID, yytext() );
          }
        case 153: break;
        case 52: 
          { error("type is a reserved word", ""); return getTerm( Terminals.ID, yytext() );
          }
        case 154: break;
        case 68: 
          { error("return is a reserved word", ""); return getTerm( Terminals.ID, yytext() );
          }
        case 155: break;
        case 19: 
          { return getTerm( Terminals.TYPE, yytext());
          }
        case 156: break;
        case 79: 
          { error("implicit is a reserved word", ""); return getTerm( Terminals.ID, yytext() );
          }
        case 157: break;
        case 6: 
          { return getTerm( Terminals.MINUS);
          }
        case 158: break;
        case 30: 
          { return getTerm( Terminals.LE);
          }
        case 159: break;
        case 2: 
          { 
          }
        case 160: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case COMMENT: {
              error("Comment started at line " + commentStartLine + " has no closing match"); yybegin(YYINITIAL);
            }
            case 225: break;
            default:
              {
                return getTerm(Terminals.EOF);
              }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
